(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{14:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),i=r.a.forwardRef(function(e,n){var t=e.type,a=e.placeholder,i=e.value,l=e.onChange,c=e.name,o=e.className;return r.a.createElement("input",{type:t,placeholder:a,value:i,onChange:function(e){return l(e.target.value)},name:c,className:o,ref:n})}),l=function(e){var n=e.name,t=e.value,a=e.onChange,i=e.options,l=e.className;return r.a.createElement("select",{name:n,value:t,onChange:function(e){return a(e.target.value)},className:l},i.map(function(e,n){return r.a.createElement("option",{value:e,key:n},e)}))},c=function(e){var n=e.value,t=e.onClick,a=e.name,i=e.className;return r.a.createElement("button",{onClick:t,name:a,className:i},n)},o=function(e,n){console.log(e,n)},s=Object(a.forwardRef)(function(e,n){var t=e.inputPlaceHolder,a=e.inputValue,c=e.inputOnchange,o=e.selectValue,s=e.selectOnchange;return r.a.createElement("div",{className:"inputSelect",ref:n},r.a.createElement(i,{type:"number",placeholder:t,name:"minsecTime",value:a,onChange:c}),r.a.createElement(l,{name:"minsec",options:["s","m"],value:o,onChange:s}))});function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],a=!0,r=!1,i=void 0;try{for(var l,c=e[Symbol.iterator]();!(a=(l=c.next()).done)&&(t.push(l.value),!n||t.length!==n);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m=function(){var e=u(Object(a.useState)(""),2),n=e[0],t=e[1],m=u(Object(a.useState)("Today"),2),f=m[0],d=m[1],v=u(Object(a.useState)(""),2),g=v[0],p=v[1],h=u(Object(a.useState)(""),2),y=h[0],w=h[1],N=u(Object(a.useState)("s"),2),b=N[0],E=N[1],O=u(Object(a.useState)(!1),2),T=O[0],k=O[1],S=r.a.createRef(),R=r.a.createRef(),D={taskFieldRef:S,timeFieldRef:R};return r.a.createElement("div",{className:"scheduleAlarmContainer"},r.a.createElement(i,{type:"text",placeholder:"Incident Number",name:"task",value:n,onChange:t,ref:S,className:"taskInputField"}),r.a.createElement(l,{name:"day",options:["Today","Tomorrow","Recurring"],value:f,onChange:d,className:"daySelect"}),"Recurring"===f?r.a.createElement(s,{inputValue:y,inputOnchange:w,inputPlaceHolder:"Time",selectValue:b,selectOnchange:E,ref:R}):r.a.createElement(i,{type:"time",name:"time",value:g,onChange:p,className:"inputTime",ref:R}),T?r.a.createElement("div",{className:"warningMessage"},"Time should be greater than 5 Seconds"):r.a.createElement("div",{className:"warningMessage"}),r.a.createElement(c,{name:"setAlarmButton",value:"Set Incident Reminder",className:"setAlarmButton",onClick:function(){if(console.log("inputValue, selectValue",y,b),"Today"===f||"Tomorrow"===f){if(!n||!g){var e={taskFieldRef:n,timeFieldRef:g};return Object.keys(e).map(function(n){if(!e[n]){var t=D[n].current.className.split(" ");t.indexOf("warning-vibration-animation")>=0?(t[t.indexOf("warning-vibration-animation")]="warning-vibration-animation-toggle",o("classArray",t),D[n].current.className="".concat(t.join(" "))):t.indexOf("warning-vibration-animation-toggle")>=0?(t[t.indexOf("warning-vibration-animation-toggle")]="warning-vibration-animation",o("classArray",t),D[n].current.className="".concat(t.join(" "))):D[n].current.className="".concat(t.join(" ")," warning-vibration-animation")}}),void setTimeout(function(){S.current.className="taskInputField",R.current.className="inputTime",console.log("Removed")},1e3)}if("Today"===f){var t=String(new Date);if(t=t.slice(0,t.indexOf((new Date).getFullYear())+5)+g+":00 "+t.slice(t.indexOf("GMT")),console.log("stringNewDate",t),new Date(t).getTime()<(new Date).getTime())return void console.log("Dfdsfdsfdsfdsf")}}else if("Recurring"===f){if(console.log("timeFieldRef.current",R.current),!n)return S.current.className="taskInputField warning-vibration-animation",void setTimeout(function(){S.current.className="taskInputField",console.log("Removed")},1e3);if(!y)return R.current.className="inputSelect warning-vibration-animation",void setTimeout(function(){R.current.className="inputSelect",console.log("Removed")},1e3);if(y<5&&"s"===b)return k(!0),void setTimeout(function(){k(!1)},2e3)}switch(f){case"Today":var a=String(new Date);a=a.slice(0,a.indexOf((new Date).getFullYear())+5)+g+":00 "+a.slice(a.indexOf("GMT")),console.log("newDate",a),chrome.alarms.create(n,{when:new Date(a).getTime()});break;case"Tomorrow":var r=String(new Date(Date.now()+864e5));r=r.slice(0,r.indexOf((new Date).getFullYear())+5)+g+":00 "+r.slice(r.indexOf("GMT")),console.log("nextDayDate",r),chrome.alarms.create(n,{when:new Date(r).getTime()});break;case"Recurring":"m"===b?chrome.alarms.create(n,{periodInMinutes:Number(y)}):chrome.alarms.create(n,{periodInMinutes:y/60})}var i;(i=document.getElementById("snackbar")).className="show",setTimeout(function(){i.className=i.className.replace("show","")},3e3)}}))},f=function(e){var n=e.links,t=e.className,a=e.onClick,i=e.active;return r.a.createElement("div",{className:t},function(e,n,t){return e.map(function(e,a){return r.a.createElement("span",{key:a,onClick:function(a){a.preventDefault(),n("|"===e?t:e)},className:t===e?"activeBottomNav":""},e)})}(n,a,i))};function d(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],a=!0,r=!1,i=void 0;try{for(var l,c=e[Symbol.iterator]();!(a=(l=c.next()).done)&&(t.push(l.value),!n||t.length!==n);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var v=function(){var e=d(Object(a.useState)([]),2),n=e[0],t=e[1];Object(a.useEffect)(function(){return console.log("IN COMPONENT DID MOUNT")}),chrome.alarms.getAll(function(e){console.log("lalarms",e),JSON.stringify(e)!=JSON.stringify(n)&&t(e)});return r.a.createElement("div",{className:"tasks-container"},r.a.createElement("ul",null,n.length?n.map(function(e,a){var i=e.scheduledTime,l=String(new Date(i));return r.a.createElement(r.a.Fragment,null,r.a.createElement("li",{key:a},e.name," at ",l.slice(l.indexOf((new Date).getFullYear())+5,l.indexOf("GMT")-1),r.a.createElement("img",{src:"../delete.svg",onClick:function(a){var r;a.preventDefault(),r=e.name,n.length&&(t(n.filter(function(e){return e.name!==r})),chrome.alarms.clear(r))},className:"cross-button"})))}):""))};function g(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],a=!0,r=!1,i=void 0;try{for(var l,c=e[Symbol.iterator]();!(a=(l=c.next()).done)&&(t.push(l.value),!n||t.length!==n);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p=function(){var e=g(Object(a.useState)([""]),2),n=e[0],t=e[1];return chrome.storage.sync.get({list:[]},function(e){console.log(e.list),t(e.list)}),r.a.createElement("div",{className:"tasks-container"},r.a.createElement("ul",null,n.reverse().map(function(e){return r.a.createElement("li",null,e)})))};function h(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],a=!0,r=!1,i=void 0;try{for(var l,c=e[Symbol.iterator]();!(a=(l=c.next()).done)&&(t.push(l.value),!n||t.length!==n);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}n.default=function(){var e=h(Object(a.useState)("Set Reminder"),2),n=e[0],t=e[1];return console.log("showAlarmsList",n),r.a.createElement("div",{className:"container"},"Set Reminder"===n?r.a.createElement(m,null):"Active Reminders"===n?r.a.createElement(v,null):r.a.createElement(p,null),r.a.createElement(f,{links:["Set Reminder","|","Active Reminders","|","History"],className:"bottomNavigation",onClick:t,active:n}),r.a.createElement("div",{id:"snackbar"},"Reminder set!!"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,